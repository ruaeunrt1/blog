<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Raincal&#39;s Blog</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://raincal.gitee.io/blog/"/>
  <updated>2018-09-29T02:05:49.000Z</updated>
  <id>https://raincal.gitee.io/blog/</id>
  
  <author>
    <name>Raincal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Gogs与主机共享22端口</title>
    <link href="https://raincal.gitee.io/blog/post/gogs-share-22-port/"/>
    <id>https://raincal.gitee.io/blog/post/gogs-share-22-port/</id>
    <published>2018-03-09T17:42:14.000Z</published>
    <updated>2018-09-29T02:05:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Docker安装Gogs时，一般会把容器的22端口映射到主机的其它端口(比如10022)<br>在以SSH方式clone项目时，URL长这样</p><blockquote><p>ssh:<a href="mailto://git@git.example.com" target="_blank" rel="noopener">//git@git.example.com</a>:10022:username/project.git</p></blockquote><p>但我们想要的是类似于GitHub那样的，这时需要把Gogs的SSH端口设置为22</p><blockquote><p><a href="mailto:git@git.example.com" target="_blank" rel="noopener">git@git.example.com</a>:username/project.git</p></blockquote><a id="more"></a><p>下面说一下主要步骤</p><h3 id="创建git用户"><a href="#创建git用户" class="headerlink" title="创建git用户"></a>创建git用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root]$ useradd git</span><br><span class="line">[root]$ id git    <span class="comment"># 获取uid和gid</span></span><br><span class="line">uid=1002(git) gid=1002(git) groups=1002(git)</span><br><span class="line">[root]$ usermod -aG docker git    <span class="comment"># 把git用户加入docker组</span></span><br><span class="line">[root]$ su git</span><br><span class="line">[git]$ mkdir -p ~/gogs/data   <span class="comment"># 在git用户下创建gogs/data文件夹，作为gogs容器主要数据的挂载目录</span></span><br></pre></td></tr></table></figure><h3 id="安装Gogs"><a href="#安装Gogs" class="headerlink" title="安装Gogs"></a>安装Gogs</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[git]$ docker run -d --name=gogs -p 10022:22 -p 10080:3000 -v ~/gogs/data:/data -e <span class="string">"PUID=1002"</span> -e <span class="string">"PGID=1002"</span> --restart=always gogs/gogs     <span class="comment"># PUID PGID与上面获取的uid gid保持一致</span></span><br><span class="line">[git]$ ln -s ~/gogs/data/git/.ssh ~/    <span class="comment"># 将gogs的.ssh目录软连接到本地的.ssh</span></span><br></pre></td></tr></table></figure><p>现在可以通过服务器外网ip:10080进入安装页面，也可以等反代设置好后通过域名进行访问<br>我用的数据库是Sqlite3，不需要额外配置，如果你选择的是其它数据库，可以参考<a href="https://www.jianshu.com/p/424627516ef6" target="_blank" rel="noopener">这篇文章</a><br>相关配置可以参考<a href="https://gogs.io/docs/advanced/configuration_cheat_sheet" target="_blank" rel="noopener">官方文档</a></p><h3 id="生成SSH-key"><a href="#生成SSH-key" class="headerlink" title="生成SSH key"></a>生成SSH key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[git]$ ssh-keygen -t rsa -b 4096 -C <span class="string">"git@git.example.com"</span></span><br><span class="line">[git]$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">[git]$ cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line">[git]$ chmod 600 authorized_keys</span><br></pre></td></tr></table></figure><p>在authorized_keys最前面添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa AAAAB3NzaC1y..........YGedddqAN6w== git@git.example.com</span><br></pre></td></tr></table></figure><h3 id="Caddy反向代理"><a href="#Caddy反向代理" class="headerlink" title="Caddy反向代理"></a>Caddy反向代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root]$ mkdir caddy &amp;&amp; <span class="built_in">cd</span> <span class="variable">$_</span></span><br></pre></td></tr></table></figure><p>在caddy目录下创建Caddyfile文件，下面是参考配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git.example.com &#123;</span><br><span class="line">    tls git@example.com     # 填写你的邮箱，用于申请证书</span><br><span class="line">    proxy / your-ip:10080</span><br><span class="line">    header / Strict-Transport-Security &quot;max-age=31536000;&quot;      # 开启HSTS</span><br><span class="line">    gzip</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动caddy"><a href="#启动caddy" class="headerlink" title="启动caddy"></a>启动caddy</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root]$ docker run -d --name=caddy -v ~/caddy/Caddyfile:/etc/Caddyfile -v ~/.caddy:/root/.caddy -p 80:80 -p 443:443 --restart=always abiosoft/caddy</span><br></pre></td></tr></table></figure><h3 id="配置git用户登录问题"><a href="#配置git用户登录问题" class="headerlink" title="配置git用户登录问题"></a>配置git用户登录问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root]$ mkdir -p /app/gogs/</span><br><span class="line">[root]$ cat &gt;/app/gogs/gogs &lt;&lt;<span class="string">'END'</span></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">ssh -p 10022 -o StrictHostKeyChecking=no git@127.0.0.1 \</span><br><span class="line"><span class="string">"SSH_ORIGINAL_COMMAND=\"<span class="variable">$SSH_ORIGINAL_COMMAND</span>\" <span class="variable">$0</span> <span class="variable">$@</span>"</span></span><br><span class="line">END</span><br><span class="line">[root]$ chmod 755 /app/gogs/gogs</span><br></pre></td></tr></table></figure><div class="note default"><p>这样就差不多完成了，下面需要在本地生成SSH密匙，然后在web端把密匙添加到Gogs<br>如果需要修改Gogs的配置，比如安装的时候DOMAIN写的IP现在要修改为域名，可以到/home/git/gogs/data/gogs/conf/找到app.ini，修改完后重启gogs容器</p></div><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://notes.guoliangwu.com/2018/01/09/Install-and-configure-Gogs-with-openSSH-Server/" target="_blank" rel="noopener">安装Gogs并共享主机22端口</a><br><a href="http://www.ateijelo.com/blog/2016/07/09/share-port-22-between-docker-gogs-ssh-and-local-system" target="_blank" rel="noopener">Share port 22 between Gogs inside Docker &amp; the local system</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用Docker安装Gogs时，一般会把容器的22端口映射到主机的其它端口(比如10022)&lt;br&gt;在以SSH方式clone项目时，URL长这样&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ssh:&lt;a href=&quot;mailto://git@git.example.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;//git@git.example.com&lt;/a&gt;:10022:username/project.git&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但我们想要的是类似于GitHub那样的，这时需要把Gogs的SSH端口设置为22&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;mailto:git@git.example.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git@git.example.com&lt;/a&gt;:username/project.git&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Gogs" scheme="https://raincal.gitee.io/blog/tags/Gogs/"/>
    
      <category term="Git" scheme="https://raincal.gitee.io/blog/tags/Git/"/>
    
      <category term="SSH" scheme="https://raincal.gitee.io/blog/tags/SSH/"/>
    
      <category term="Docker" scheme="https://raincal.gitee.io/blog/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>NexT主题优化：重构leancloud阅读量统计模块</title>
    <link href="https://raincal.gitee.io/blog/post/hexo-next-optimize-leancloud/"/>
    <id>https://raincal.gitee.io/blog/post/hexo-next-optimize-leancloud/</id>
    <published>2018-02-11T05:13:35.000Z</published>
    <updated>2018-11-08T03:34:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要重构"><a href="#为什么要重构" class="headerlink" title="为什么要重构"></a>为什么要重构</h2><div class="note default"><p>从去年 10 月份开始，LeanCloud 国内节点 API 的老版域名 api.leancloud.cn 在国外一些地区和国内少数地区会出现一定概率的解析错误（DNS 污染），这导致我们的博客阅读量无法正常显示</p></div><a id="more"></a><h3 id="官方解决方案"><a href="#官方解决方案" class="headerlink" title="官方解决方案"></a>官方解决方案</h3><p>如果使用的是原生 SDK，请尽快升级到以下版本：</p><ul><li>Android 3.16.4 及更高版本</li><li>iOS 5.0.0 及更高版本</li><li>JavaScript 3.0.0 及更高版本</li></ul><p>如果使用 REST API 来访问 api.leancloud.cn，请通过以下地址来动态获取应用专属的二级域名：</p><p><a href="https://app-router.leancloud.cn/2/route?appId=" target="_blank" rel="noopener">https://app-router.leancloud.cn/2/route?appId=</a> &lt;替换为 appId&gt;</p><p>然后使用 api_server 指示的域名来访问我们的 API 服务，即可正常获得结果。</p><div class="note info"><p>NexT 主题里使用的 SDK 是 av-core-mini-0.6.4，这个库 gzip 后有 28.5KB<br>对于一个只有几个请求的小模块来说，完全没必要用 SDK，可以手动请求官方 API 完成目的</p></div><p>重构后的代码可以到我的<a href="https://github.com/Raincal/hexo-theme-next/blob/master/layout/_third-party/analytics/lean-analytics.swig" target="_blank" rel="noopener">GitHub</a>查看</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么要重构&quot;&gt;&lt;a href=&quot;#为什么要重构&quot; class=&quot;headerlink&quot; title=&quot;为什么要重构&quot;&gt;&lt;/a&gt;为什么要重构&lt;/h2&gt;&lt;div class=&quot;note default&quot;&gt;&lt;p&gt;从去年 10 月份开始，LeanCloud 国内节点 API 的老版域名 api.leancloud.cn 在国外一些地区和国内少数地区会出现一定概率的解析错误（DNS 污染），这导致我们的博客阅读量无法正常显示&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://raincal.gitee.io/blog/categories/Hexo/"/>
    
    
      <category term="NexT" scheme="https://raincal.gitee.io/blog/tags/NexT/"/>
    
      <category term="Leancloud" scheme="https://raincal.gitee.io/blog/tags/Leancloud/"/>
    
  </entry>
  
  <entry>
    <title>Hello 2018</title>
    <link href="https://raincal.gitee.io/blog/post/hello-2018/"/>
    <id>https://raincal.gitee.io/blog/post/hello-2018/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2018-11-08T03:32:50.000Z</updated>
    
    <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="//cdn-1256167913.image.myqcloud.com/images/Hello-2018/hello2018.jpg!860" alt="hello2018"></div></div><div class="group-picture-row"></div></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;group-picture&quot;&gt;&lt;div class=&quot;group-picture-container&quot;&gt;&lt;div class=&quot;group-picture-row&quot;&gt;&lt;div class=&quot;group-picture-column&quot; style=&quot;widt
      
    
    </summary>
    
    
      <category term="picture" scheme="https://raincal.gitee.io/blog/tags/picture/"/>
    
  </entry>
  
  <entry>
    <title>grub rescue模式下修复Linux引导</title>
    <link href="https://raincal.gitee.io/blog/post/grub-rescue/"/>
    <id>https://raincal.gitee.io/blog/post/grub-rescue/</id>
    <published>2017-11-22T08:29:39.000Z</published>
    <updated>2018-10-17T16:33:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>前些天把很久没用的 Windows10 更新了下，更新后就进不了 Linux 系统了，提示 “file ‘/boot/grub/x86_64-efi/normal.mod’ not found”，之后就进入 grub rescue 模式了</p><p>解决方法很简单，在 grub rescue 模式下找到系统的启动分区，手动启动系统，之后重新安装 grub 到 efi 分区即可</p><a id="more"></a><h3 id="grub-rescue-下的操作"><a href="#grub-rescue-下的操作" class="headerlink" title="grub rescue 下的操作"></a>grub rescue 下的操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看设备和分区情况</span></span><br><span class="line">grub rescue&gt; ls</span><br><span class="line">(hd0) (hd0, gpt2) (hd0, gpt1) ...</span><br><span class="line"><span class="comment"># 查看分区文件确定启动分区位置</span></span><br><span class="line">grub rescue&gt; ls (hd1, gpt10)/</span><br><span class="line"><span class="comment"># 设置启动分区，载入启动需要的模块</span></span><br><span class="line">grub rescue&gt; <span class="built_in">set</span> root=(hd1, gpt10)</span><br><span class="line">grub rescue&gt; <span class="built_in">set</span> prefix=(hd1, gpt10)/boot/grub</span><br><span class="line">grub rescue&gt; insmod normal</span><br><span class="line">grub rescue&gt; normal</span><br></pre></td></tr></table></figure><p>执行完 normal 命令后，顺利的话就能进入系统了</p><h3 id="查找-boot-efi"><a href="#查找-boot-efi" class="headerlink" title="查找 boot/efi"></a>查找 boot/efi</h3><p>通过命令 <strong>df</strong> 查看 boot/efi 所在挂载点</p><img src="//cdn-1256167913.image.myqcloud.com/images/grub-rescue/grub.png" alt="grub"><h3 id="重新安装-grub"><a href="#重新安装-grub" class="headerlink" title="重新安装 grub"></a>重新安装 grub</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜ sudo grub-install /dev/sda1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前些天把很久没用的 Windows10 更新了下，更新后就进不了 Linux 系统了，提示 “file ‘/boot/grub/x86_64-efi/normal.mod’ not found”，之后就进入 grub rescue 模式了&lt;/p&gt;
&lt;p&gt;解决方法很简单，在 grub rescue 模式下找到系统的启动分区，手动启动系统，之后重新安装 grub 到 efi 分区即可&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://raincal.gitee.io/blog/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://raincal.gitee.io/blog/tags/Linux/"/>
    
      <category term="grub" scheme="https://raincal.gitee.io/blog/tags/grub/"/>
    
      <category term="Arch" scheme="https://raincal.gitee.io/blog/tags/Arch/"/>
    
  </entry>
  
  <entry>
    <title>VSCode icon 分享</title>
    <link href="https://raincal.gitee.io/blog/post/vscode-icon-share/"/>
    <id>https://raincal.gitee.io/blog/post/vscode-icon-share/</id>
    <published>2017-10-12T00:42:57.000Z</published>
    <updated>2018-12-08T06:37:32.000Z</updated>
    
    <content type="html"><![CDATA[<img src="//cdn-1256167913.image.myqcloud.com/images/vscode-icon-share/vscode.png" alt="Preview of Visual Studio Code icon"><p>Icon created for <a href="https://code.visualstudio.com" target="_blank" rel="noopener">Visual Studio Code</a></p><p>Reference <a href="https://github.com/iiroj/public/tree/master/Visual%20Studio%20Code%20icon" target="_blank" rel="noopener">iiroj/public</a></p><h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><p><a href="https://github.com/Raincal/vscode-icon" target="_blank" rel="noopener">Raincal/vscode-icon</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;//cdn-1256167913.image.myqcloud.com/images/vscode-icon-share/vscode.png&quot; alt=&quot;Preview of Visual Studio Code icon&quot;&gt;
&lt;p&gt;Icon created
      
    
    </summary>
    
    
      <category term="Editor" scheme="https://raincal.gitee.io/blog/tags/Editor/"/>
    
      <category term="VSCode" scheme="https://raincal.gitee.io/blog/tags/VSCode/"/>
    
      <category term="Icon" scheme="https://raincal.gitee.io/blog/tags/Icon/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker部署FlarumChina</title>
    <link href="https://raincal.gitee.io/blog/post/deploy-flarumchina-with-docker/"/>
    <id>https://raincal.gitee.io/blog/post/deploy-flarumchina-with-docker/</id>
    <published>2017-08-07T02:49:51.000Z</published>
    <updated>2018-09-01T09:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>服务器安装 Docker 和 Docker Compose</p><p>参考教程：<br><a href="http://get.daocloud.io/#install-docker" target="_blank" rel="noopener">http://get.daocloud.io/#install-docker</a></p><p>没有服务器的可以在本地安装 Docker 或使用 DaoCloud 的胶囊主机, 能免费体验 120 分钟，足够学习使用</p><p>路径：自有主机 -&gt; 集群管理 -&gt; 添加主机</p><img src="//cdn-1256167913.image.myqcloud.com/images/deploy-flarumChina-with-docker/pic01.png" alt="深度截图_选择区域_20170807083400"><a id="more"></a><h2 id="安装-Flarum"><a href="#安装-Flarum" class="headerlink" title="安装 Flarum"></a>安装 Flarum</h2><p>我们使用到的镜像是 <a href="https://github.com/Raincal/docker-flarum-china" target="_blank" rel="noopener">raincal/docker-flarum-china</a></p><h3 id="Ports"><a href="#Ports" class="headerlink" title="Ports"></a>Ports</h3><p><code>8888</code></p><h3 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h3><ul><li>/flarum/app/assets : FlarumChina 资源目录</li><li>/flarum/app/extensions : FlarumChina 插件目录</li></ul><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><table><thead><tr><th>变量</th><th>描述</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td><strong>UID</strong></td><td>Flarum user id</td><td><em>optional</em></td><td>991</td></tr><tr><td><strong>GID</strong></td><td>Flarum group id</td><td><em>optional</em></td><td>991</td></tr><tr><td><strong>DEBUG</strong></td><td>Flarum debug mode</td><td><em>optional</em></td><td>false</td></tr><tr><td><strong>FORUM_URL</strong></td><td>Forum URL</td><td><strong>required</strong></td><td>none</td></tr><tr><td><strong>DB_HOST</strong></td><td>MariaDB instance ip/hostname</td><td><em>optional</em></td><td>mariadb</td></tr><tr><td><strong>DB_USER</strong></td><td>MariaDB database username</td><td><em>optional</em></td><td>flarum</td></tr><tr><td><strong>DB_NAME</strong></td><td>MariaDB database name</td><td><em>optional</em></td><td>flarum</td></tr><tr><td><strong>DB_PASS</strong></td><td>MariaDB database password</td><td><strong>required</strong></td><td>none</td></tr><tr><td><strong>DB_PREF</strong></td><td>Flarum tables prefix</td><td><em>optional</em></td><td>none</td></tr><tr><td><strong>UPLOAD_MAX_SIZE</strong></td><td>The maximum size of an uploaded file</td><td><em>optional</em></td><td>50M</td></tr><tr><td><strong>MEMORY_LIMIT</strong></td><td>maximum amount of memory used by php</td><td><em>optional</em></td><td>128M</td></tr></tbody></table><h3 id="编写-docker-compose-yml-文件"><a href="#编写-docker-compose-yml-文件" class="headerlink" title="编写 docker-compose.yml 文件"></a>编写 docker-compose.yml 文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir flarum &amp;&amp; <span class="built_in">cd</span> flarum</span><br><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure><p>根据自身情况 修改</p><p>FORUM_URL</p><p>DB_PASS</p><p>MYSQL_ROOT_PASSWORD</p><p>MYSQL_PASSWORD</p><p>等环境变量</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">flarum:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="string">raincal/docker-flarum-china:0.1.0-beta.7-stable</span></span><br><span class="line"><span class="attr">  container_name:</span> <span class="string">flarum</span></span><br><span class="line"><span class="attr">  links:</span></span><br><span class="line"><span class="attr">    - mariadb:</span><span class="string">mariadb</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">FORUM_URL=https://forum.domain.tld</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">DB_PASS=123456</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/mnt/docker/flarum/assets:/flarum/app/assets</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/mnt/docker/flarum/extensions:/flarum/app/extensions</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mariadb:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">mariadb:10.1</span></span><br><span class="line"><span class="attr">  container_name:</span> <span class="string">mariadb</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/mnt/docker/mysql/db:/var/lib/mysql</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">MYSQL_ROOT_PASSWORD=123456</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">MYSQL_DATABASE=flarum</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">MYSQL_USER=flarum</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">MYSQL_PASSWORD=123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nginx:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="string">wonderfall/boring-nginx</span></span><br><span class="line"><span class="attr">  container_name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  links:</span></span><br><span class="line"><span class="attr">    - flarum:</span><span class="string">flarum</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"80:8000"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"443:4430"</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/mnt/docker/nginx/sites-enabled:/sites-enabled</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/mnt/docker/nginx/conf:/conf.d</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/mnt/docker/nginx/log:/var/log/nginx</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/mnt/docker/nginx/certs:/certs</span></span><br></pre></td></tr></table></figure><h3 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h3><p><code>docker-compose up -d</code></p><p>若使用胶囊主机，可以到 自有主机 -&gt; Stack -&gt; 创建新 Stack</p><img src="//cdn-1256167913.image.myqcloud.com/images/deploy-flarumChina-with-docker/pic02.png" alt="深度截图_选择区域_20170807084450"><h3 id="设置-nginx-反向代理"><a href="#设置-nginx-反向代理" class="headerlink" title="设置 nginx 反向代理"></a>设置 nginx 反向代理</h3><p>通过 ssh 连接到胶囊主机</p><p><code>ssh ubuntu@52.80.37.119</code></p><img src="//cdn-1256167913.image.myqcloud.com/images/deploy-flarumChina-with-docker/pic03.png" alt="深度截图_选择区域_20170807093749"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx ngxproxy</span><br><span class="line"></span><br><span class="line">Welcome to ngxproxy utility.</span><br><span class="line">We<span class="string">'re about to create a new virtual host (AKA server block).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Name: flarum</span></span><br><span class="line"><span class="string">Domain: forum.domain.tld</span></span><br><span class="line"><span class="string">Webroot (default is /):</span></span><br><span class="line"><span class="string">Container: flarum</span></span><br><span class="line"><span class="string">Port (default is 80): 8888</span></span><br><span class="line"><span class="string">HTTPS [y/n]: n</span></span><br><span class="line"><span class="string">Max body size in MB (integer/null): 50</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Done! flarum.conf has been generated.</span></span><br><span class="line"><span class="string">Reload nginx now? [y/n]: y</span></span><br><span class="line"><span class="string">nginx successfully reloaded.</span></span><br></pre></td></tr></table></figure><p>完成后访问外网IP 52.80.37.119，本地环境的话访问 localhost 开始安装 flarum</p><p><strong>管理员密码需要大于8位</strong></p><img src="//cdn-1256167913.image.myqcloud.com/images/deploy-flarumChina-with-docker/pic05.png" alt="screencapture-54-222-128-207-1502096436141" class="imgurl">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h2&gt;&lt;p&gt;服务器安装 Docker 和 Docker Compose&lt;/p&gt;
&lt;p&gt;参考教程：&lt;br&gt;&lt;a href=&quot;http://get.daocloud.io/#install-docker&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://get.daocloud.io/#install-docker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;没有服务器的可以在本地安装 Docker 或使用 DaoCloud 的胶囊主机, 能免费体验 120 分钟，足够学习使用&lt;/p&gt;
&lt;p&gt;路径：自有主机 -&amp;gt; 集群管理 -&amp;gt; 添加主机&lt;/p&gt;
&lt;img src=&quot;//cdn-1256167913.image.myqcloud.com/images/deploy-flarumChina-with-docker/pic01.png&quot; alt=&quot;深度截图_选择区域_20170807083400&quot;&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://raincal.gitee.io/blog/tags/Docker/"/>
    
      <category term="Linux" scheme="https://raincal.gitee.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>10 个可用 ES6 替代的 Lodash 特性</title>
    <link href="https://raincal.gitee.io/blog/post/lodash/"/>
    <id>https://raincal.gitee.io/blog/post/lodash/</id>
    <published>2016-06-30T13:02:10.000Z</published>
    <updated>2018-09-01T09:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="noopener">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@shawndai06" target="_blank" rel="noopener">少年阿布DX</a><br>链接：<a href="http://www.zcfy.cc/article/467" target="_blank" rel="noopener">http://www.zcfy.cc/article/467</a><br>原文：<a href="https://www.sitepoint.com/lodash-features-replace-es6/" target="_blank" rel="noopener">https://www.sitepoint.com/lodash-features-replace-es6/</a></p></blockquote><p><a href="https://www.sitepoint.com/author/dprince/" target="_blank" rel="noopener">Dan Prince</a></p><p><em>本文由 <a href="https://www.sitepoint.com/author/mbrown" target="_blank" rel="noopener">Mark Brown</a> 协助审查。感谢所有 SitePoint 的审稿人使 SitePoint 的内容能达到最佳</em>。</p><p><a href="https://lodash.com/" target="_blank" rel="noopener">Lodash</a> 现在是 npm 上<a href="https://www.npmjs.com/browse/depended" target="_blank" rel="noopener">被依赖最多的包</a>，但如果你在使用 ES6 的话，实际上你可能不再需要它了。在本文中，我们将使用原生的集合方法与箭头函数还有一些其它新的特性来帮我们更简便地实现许多热门的用例。</p><h2 id="1-Map-Filter-Reduce"><a href="#1-Map-Filter-Reduce" class="headerlink" title="1. Map, Filter, Reduce"></a>1. Map, Filter, Reduce</h2><p>这些集合方法使数据转化变得轻而易举。由于普遍地对此特性的支持，我们可以将它与箭头函数组合起来，以助我们使用比 Lodash 的实现更简便的方法来实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">_.map([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123; <span class="keyword">return</span> n * <span class="number">3</span>; &#125;);</span><br><span class="line"><span class="comment">// [3, 6, 9]</span></span><br><span class="line">_.reduce([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="keyword">function</span>(<span class="params">total, n</span>) </span>&#123; <span class="keyword">return</span> total + n; &#125;, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line">_.filter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123; <span class="keyword">return</span> n &lt;= <span class="number">2</span>; &#125;);</span><br><span class="line"><span class="comment">// [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变为</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">3</span>);</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reduce(<span class="function">(<span class="params">total, n</span>) =&gt;</span> total + n);</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].filter(<span class="function"><span class="params">n</span> =&gt;</span> n &lt;= <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>不止于此，如果我们使用 ES6 的 polyfill，我们也能使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find" target="_blank" rel="noopener">find</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank" rel="noopener">some</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every" target="_blank" rel="noopener">every</a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight" target="_blank" rel="noopener">reduceRight</a></p><a id="more"></a><h2 id="2-Head-amp-Tail"><a href="#2-Head-amp-Tail" class="headerlink" title="2. Head &amp; Tail"></a>2. Head &amp; Tail</h2><p><a href="https://www.sitepoint.com/preparing-ecmascript-6-destructuring-assignment/" target="_blank" rel="noopener">解构语法</a> 让我们可以获取一个列表的头（head）和尾（tail），而无需工具函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">_.head([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">_.tail([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// [2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变为</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>也可以用相似的方式获得列表最后一个元素（last）以及除其之外的元素（initial）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">_.initial([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// -&gt; [1, 2]</span></span><br><span class="line">_.last([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变为</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [last, ...initial] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reverse();</span><br></pre></td></tr></table></figure><p>如果你讨厌 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse" target="_blank" rel="noopener">reverse</a> 会改变数据结构，那你可以在调用 reverse 之前使用延展操作符（spread operator）来复制一个数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xs = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> [last, ...initial] = [...xs].reverse();</span><br></pre></td></tr></table></figure><h2 id="3-Rest-amp-Spread"><a href="#3-Rest-amp-Spread" class="headerlink" title="3. Rest &amp; Spread"></a>3. Rest &amp; Spread</h2><p><a href="https://lodash.com/docs#rest" target="_blank" rel="noopener">rest</a> 和 <a href="https://lodash.com/docs#spread" target="_blank" rel="noopener">spread</a> 函数能让我们定义与调用能接受参数数量不定的函数。ES6 为这两种操作引入了专用的语法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> say = _.rest(<span class="function"><span class="keyword">function</span>(<span class="params">what, names</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> last = _.last(names);</span><br><span class="line">  <span class="keyword">var</span> initial = _.initial(names);</span><br><span class="line">  <span class="keyword">var</span> finalSeparator = (_.size(names) &gt; <span class="number">1</span> ? <span class="string">', &amp; '</span> : <span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> what + <span class="string">' '</span> + initial.join(<span class="string">', '</span>) +</span><br><span class="line">    finalSeparator + _.last(names);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">say(<span class="string">'hello'</span>, <span class="string">'fred'</span>, <span class="string">'barney'</span>, <span class="string">'pebbles'</span>);</span><br><span class="line"><span class="comment">// "hello fred, barney, &amp; pebbles"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变为</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> say = <span class="function">(<span class="params">what, ...names</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [last, ...initial] = names.reverse();</span><br><span class="line">  <span class="keyword">const</span> finalSeparator = (names.length &gt; <span class="number">1</span> ? <span class="string">', &amp;'</span> : <span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;what&#125;</span> <span class="subst">$&#123;initial.join(<span class="string">', '</span>)&#125;</span> <span class="subst">$&#123;finalSeparator&#125;</span> <span class="subst">$&#123;last&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">say(<span class="string">'hello'</span>, <span class="string">'fred'</span>, <span class="string">'barney'</span>, <span class="string">'pebbles'</span>);</span><br><span class="line"><span class="comment">// "hello fred, barney, &amp; pebbles"</span></span><br></pre></td></tr></table></figure><h2 id="4-Curry"><a href="#4-Curry" class="headerlink" title="4. Curry"></a>4. Curry</h2><p>如果没有更高级的语言如 <a href="http://www.typescriptlang.org" target="_blank" rel="noopener">TypeScript</a> 和 <a href="http://flowtype.org/" target="_blank" rel="noopener">Flow</a> 的支持，我们不能给函数设置类型签名，这使得函数的<a href="https://www.sitepoint.com/currying-in-functional-javascript/" target="_blank" rel="noopener">柯里化</a>（currying）非常困难。当我们接收一个柯里化的函数时，很难知道已经应用了多少参数以及我们接下来该提供什么参数。通过箭头函数，我们能显示地定义柯里化函数，使得它们对其他程序员来说非常易于理解。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> curriedAdd = _.curry(add);</span><br><span class="line"><span class="keyword">var</span> add2 = curriedAdd(<span class="number">2</span>);</span><br><span class="line">add2(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变为</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="params">a</span> =&gt;</span> b =&gt; a + b;</span><br><span class="line"><span class="keyword">const</span> add2 = add(<span class="number">2</span>);</span><br><span class="line">add2(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>这些显式的柯里化箭头函数对调试非常重要。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lodashAdd = _.curry(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> add3 = lodashAdd(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(add3.length)</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(add3);</span><br><span class="line"><span class="comment">//function wrapper() &#123;</span></span><br><span class="line"><span class="comment">//  var length = arguments.length,</span></span><br><span class="line"><span class="comment">//  args = Array(length),</span></span><br><span class="line"><span class="comment">//  index = length;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  while (index--) &#123;</span></span><br><span class="line"><span class="comment">//    args[index] = arguments[index];</span></span><br><span class="line"><span class="comment">//  &#125;…</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变为</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> es6Add = <span class="function"><span class="params">a</span> =&gt;</span> b =&gt; a + b;</span><br><span class="line"><span class="keyword">const</span> add3 = es6Add(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(add3.length);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(add3);</span><br><span class="line"><span class="comment">// function b =&gt; a + b</span></span><br></pre></td></tr></table></figure><p>如果我们使用函数式的库如 <a href="https://github.com/lodash/lodash/wiki/FP-Guide" target="_blank" rel="noopener">lodash/fp</a> 和 <a href="http://ramdajs.com" target="_blank" rel="noopener">ramda</a>，那我们也能使用箭头函数来免除对自动柯里化风格的需要。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_.map(_.prop(<span class="string">'name'</span>))(people);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变为</span></span><br><span class="line"></span><br><span class="line">people.map(<span class="function"><span class="params">person</span> =&gt;</span> person.name);</span><br></pre></td></tr></table></figure><h2 id="5-Partial"><a href="#5-Partial" class="headerlink" title="5. Partial"></a>5. Partial</h2><p>正如柯里化一样，我们也能使用箭头函数来简化显式化偏函数用法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet = <span class="function"><span class="keyword">function</span>(<span class="params">greeting, name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> greeting + <span class="string">' '</span> + name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sayHelloTo = _.partial(greet, <span class="string">'hello'</span>);</span><br><span class="line">sayHelloTo(<span class="string">'fred'</span>);</span><br><span class="line"><span class="comment">// "hello fred"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变为</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sayHelloTo = <span class="function"><span class="params">name</span> =&gt;</span> greet(<span class="string">'hello'</span>, name);</span><br><span class="line">sayHelloTo(<span class="string">'fred'</span>);</span><br><span class="line"><span class="comment">// "hello fred"</span></span><br></pre></td></tr></table></figure><p>我们也能结合剩余参数与延展操作符来部分地应用可变参数函数、</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sayHelloTo = <span class="function">(<span class="params">name, ...args</span>) =&gt;</span> greet(<span class="string">'hello'</span>, name, ...args);</span><br><span class="line">sayHelloTo(<span class="string">'fred'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// "hello fred"</span></span><br></pre></td></tr></table></figure><h2 id="6-Operators"><a href="#6-Operators" class="headerlink" title="6. Operators"></a>6. Operators</h2><p>Lodash 把很多句法操作符重新实现成了函数，所以它们可以被传入集合方法。</p><p>在大多数情况下，箭头函数能让它们定义地足够简单精炼，一行足矣。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">_.eq(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">_.add(<span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 11</span></span><br><span class="line">_.map([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _.multiply(n, <span class="number">10</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [10, 20, 30]</span></span><br><span class="line">_.reduce([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], _.add);</span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变为</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span> === <span class="number">3</span></span><br><span class="line"><span class="number">10</span> + <span class="number">1</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">10</span>);</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reduce(<span class="function">(<span class="params">total, n</span>) =&gt;</span> total + n);</span><br></pre></td></tr></table></figure><h2 id="7-Paths"><a href="#7-Paths" class="headerlink" title="7. Paths"></a>7. Paths</h2><p>许多 Lodash 的函数把路径当做字符串或者数组。然而我们可以使用箭头函数来创建更多可重用的路径。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123; <span class="string">'a'</span>: [&#123; <span class="string">'b'</span>: &#123; <span class="string">'c'</span>: <span class="number">3</span> &#125; &#125;, <span class="number">4</span>] &#125;;</span><br><span class="line"></span><br><span class="line">_.at(object, [<span class="string">'a[0].b.c'</span>, <span class="string">'a[1]'</span>]);</span><br><span class="line"><span class="comment">// [3, 4]</span></span><br><span class="line">_.at([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// ['a', 'c']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变为</span></span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  obj =&gt; obj.a[<span class="number">0</span>].b.c,</span><br><span class="line">  obj =&gt; obj.a[<span class="number">1</span>]</span><br><span class="line">].map(<span class="function"><span class="params">path</span> =&gt;</span> path(object));</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  arr =&gt; arr[<span class="number">0</span>],</span><br><span class="line">  arr =&gt; arr[<span class="number">2</span>]</span><br><span class="line">].map(<span class="function"><span class="params">path</span> =&gt;</span> path([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]));</span><br></pre></td></tr></table></figure><p>因为这些路径“只是函数”，所以我们也能复合它们。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getFirstPerson = <span class="function"><span class="params">people</span> =&gt;</span> people[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> getPostCode = <span class="function"><span class="params">person</span> =&gt;</span> person.address.postcode;</span><br><span class="line"><span class="keyword">const</span> getFirstPostCode = <span class="function"><span class="params">people</span> =&gt;</span> getPostCode(getFirstPerson(people));</span><br></pre></td></tr></table></figure><p>我们甚至能创建更高阶能接收参数的路径。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getFirstNPeople = <span class="function"><span class="params">n</span> =&gt;</span> people =&gt; people.slice(<span class="number">0</span>, n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getFirst5People = getFirstNPeople(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> getFirst5PostCodes = <span class="function"><span class="params">people</span> =&gt;</span> getFirst5People(people).map(getPostCode);</span><br></pre></td></tr></table></figure><h2 id="8-Pick"><a href="#8-Pick" class="headerlink" title="8. Pick"></a>8. Pick</h2><p><a href="https://lodash.com/docs#pick" target="_blank" rel="noopener">pick</a> 工具能让我们从一个对象中选择我们想要的属性。我们也能通过解构与对象字面量简写来获取同样的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123; <span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="string">'2'</span>, <span class="string">'c'</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> _.pick(object, [<span class="string">'a'</span>, <span class="string">'c'</span>]);</span><br><span class="line"><span class="comment">// &#123; a: 1, c: 3 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变为</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; a, c &#125; = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123; a, c &#125;;</span><br></pre></td></tr></table></figure><h2 id="9-Constant-Identity-Noop"><a href="#9-Constant-Identity-Noop" class="headerlink" title="9. Constant, Identity, Noop"></a>9. Constant, Identity, Noop</h2><p>Lodash 提供了一些工具函数来创建简单的具某一特定行为的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_.constant(&#123; <span class="string">'a'</span>: <span class="number">1</span> &#125;)();</span><br><span class="line"><span class="comment">// &#123; a: 1 &#125;</span></span><br><span class="line">_.identity(&#123; <span class="attr">user</span>: <span class="string">'fred'</span> &#125;);</span><br><span class="line"><span class="comment">// &#123; user: 'fred' &#125;</span></span><br><span class="line">_.noop();</span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>我们也能使用箭头函数行内定义这些函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> constant = <span class="function"><span class="params">x</span> =&gt;</span> () =&gt; x;</span><br><span class="line"><span class="keyword">const</span> identity = <span class="function"><span class="params">x</span> =&gt;</span> x;</span><br><span class="line"><span class="keyword">const</span> noop = <span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><p>或者我们也能把上面的例子重写为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;))();</span><br><span class="line"><span class="comment">// &#123; a: 1 &#125;</span></span><br><span class="line">(<span class="function"><span class="params">x</span> =&gt;</span> x)(&#123; <span class="attr">user</span>: <span class="string">'fred'</span> &#125;);</span><br><span class="line"><span class="comment">// &#123; user: 'fred' &#125;</span></span><br><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">undefined</span>)();</span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="10-Chaining-amp-Flow"><a href="#10-Chaining-amp-Flow" class="headerlink" title="10. Chaining &amp; Flow"></a>10. Chaining &amp; Flow</h2><p>Lodash 提供了一些函数来帮我们编写链式的语句。在大多情况下，内置的集合函数会返回一个数组实例，能直接被链式调用。但某些情况下，这些方法会改变这个集合，这样就不可能再直接地链式调用了（译者注：需要自己返回实例）。</p><p>然而我们也能以一个箭头函数数组来定义同样的转化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">_([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"> .tap(<span class="function"><span class="keyword">function</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// 修改输入函数</span></span><br><span class="line">   array.pop();</span><br><span class="line"> &#125;)</span><br><span class="line"> .reverse()</span><br><span class="line"> .value();</span><br><span class="line"><span class="comment">// [2, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变为</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pipeline = [</span><br><span class="line">  array =&gt; &#123; array.pop(); <span class="keyword">return</span> array; &#125;,</span><br><span class="line">  array =&gt; array.reverse()</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">pipeline.reduce(<span class="function">(<span class="params">xs, f</span>) =&gt;</span> f(xs), [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p>这样的话，我们甚至不需要去思考 <a href="https://lodash.com/docs#tap" target="_blank" rel="noopener">tap</a> 和 <a href="https://lodash.com/docs#thru" target="_blank" rel="noopener">thru</a> 的不同。把这个归约包装成工具函数能创造出一个非常有用的多功能工具。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pipe = <span class="function"><span class="params">functions</span> =&gt;</span> data =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> functions.reduce(</span><br><span class="line">    (value, func) =&gt; func(value),</span><br><span class="line">    data</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pipeline = pipe([</span><br><span class="line">  x =&gt; x * <span class="number">2</span>,</span><br><span class="line">  x =&gt; x / <span class="number">3</span>,</span><br><span class="line">  x =&gt; x &gt; <span class="number">5</span>,</span><br><span class="line">  b =&gt; !b</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">pipeline(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">pipeline(<span class="number">20</span>);</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Lodash 仍然还是一个非常优秀的库，这篇文章只提供了一个新鲜的观点，JavaScript 的进化版是如何让我们在一些我们之前可能不得不依赖一些工具模块的场景里允许我们直接解决问题的。</p><p>不要忽略它（译者注：Lodash），但——下次你需求一个抽象时——思考一下是否一个简单的函数就能办到了！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文转载自：&lt;a href=&quot;http://www.zcfy.cc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;众成翻译&lt;/a&gt;&lt;br&gt;译者：&lt;a href=&quot;http://www.zcfy.cc/@shawndai06&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;少年阿布DX&lt;/a&gt;&lt;br&gt;链接：&lt;a href=&quot;http://www.zcfy.cc/article/467&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.zcfy.cc/article/467&lt;/a&gt;&lt;br&gt;原文：&lt;a href=&quot;https://www.sitepoint.com/lodash-features-replace-es6/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.sitepoint.com/lodash-features-replace-es6/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sitepoint.com/author/dprince/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dan Prince&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本文由 &lt;a href=&quot;https://www.sitepoint.com/author/mbrown&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mark Brown&lt;/a&gt; 协助审查。感谢所有 SitePoint 的审稿人使 SitePoint 的内容能达到最佳&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lodash.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lodash&lt;/a&gt; 现在是 npm 上&lt;a href=&quot;https://www.npmjs.com/browse/depended&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;被依赖最多的包&lt;/a&gt;，但如果你在使用 ES6 的话，实际上你可能不再需要它了。在本文中，我们将使用原生的集合方法与箭头函数还有一些其它新的特性来帮我们更简便地实现许多热门的用例。&lt;/p&gt;
&lt;h2 id=&quot;1-Map-Filter-Reduce&quot;&gt;&lt;a href=&quot;#1-Map-Filter-Reduce&quot; class=&quot;headerlink&quot; title=&quot;1. Map, Filter, Reduce&quot;&gt;&lt;/a&gt;1. Map, Filter, Reduce&lt;/h2&gt;&lt;p&gt;这些集合方法使数据转化变得轻而易举。由于普遍地对此特性的支持，我们可以将它与箭头函数组合起来，以助我们使用比 Lodash 的实现更简便的方法来实现。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_.map([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [3, 6, 9]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_.reduce([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;total, n&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; total + n; &amp;#125;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_.filter([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n &amp;lt;= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [1, 2]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 变为&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt; =&amp;gt;&lt;/span&gt; n * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].reduce(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;total, n&lt;/span&gt;) =&amp;gt;&lt;/span&gt; total + n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt; =&amp;gt;&lt;/span&gt; n &amp;lt;= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不止于此，如果我们使用 ES6 的 polyfill，我们也能使用 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;find&lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;some&lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;every&lt;/a&gt; 和 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;reduceRight&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="lodash" scheme="https://raincal.gitee.io/blog/tags/lodash/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB常用命令</title>
    <link href="https://raincal.gitee.io/blog/post/mongodb-command/"/>
    <id>https://raincal.gitee.io/blog/post/mongodb-command/</id>
    <published>2015-07-10T08:47:56.000Z</published>
    <updated>2018-09-01T09:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://www.mongodb.org/" target="_blank" rel="noopener">mongoDB官网</a>下载安装（<a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-windows/" target="_blank" rel="noopener">Windows安装方法</a>）</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>集合——对应关系数据库中的表</p><p>文档——对应关系数据库中的行</p><h1 id="启动数据库服务"><a href="#启动数据库服务" class="headerlink" title="启动数据库服务"></a>启动数据库服务</h1><p>定位到安装目录下的bin文件夹里后</p><pre><code>&gt; mongod --dbpath ../data/db</code></pre><p>如没有<code>data/db</code>文件夹，需先创建，<code>dbpath</code>用于指定数据存放位置</p><a id="more"></a><h1 id="开启一个客户端访问数据库"><a href="#开启一个客户端访问数据库" class="headerlink" title="开启一个客户端访问数据库"></a>开启一个客户端访问数据库</h1><p>同样的bin文件夹下执行</p><pre><code>&gt; mongo</code></pre><p>默认连接至<code>test</code>数据库</p><h1 id="显示帮助"><a href="#显示帮助" class="headerlink" title="显示帮助"></a>显示帮助</h1><pre><code>&gt; help</code></pre><h1 id="显示所有数据库名称"><a href="#显示所有数据库名称" class="headerlink" title="显示所有数据库名称"></a>显示所有数据库名称</h1><pre><code>&gt; show dbs</code></pre><h1 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h1><pre><code>&gt; use test</code></pre><h1 id="显示当前连接的数据库名称"><a href="#显示当前连接的数据库名称" class="headerlink" title="显示当前连接的数据库名称"></a>显示当前连接的数据库名称</h1><pre><code>&gt; db</code></pre><h1 id="显示当前数据库所有集合"><a href="#显示当前数据库所有集合" class="headerlink" title="显示当前数据库所有集合"></a>显示当前数据库所有集合</h1><pre><code>&gt; show collections</code></pre><h1 id="显示数据库支持的方法"><a href="#显示数据库支持的方法" class="headerlink" title="显示数据库支持的方法"></a>显示数据库支持的方法</h1><pre><code>&gt; db.help()</code></pre><h1 id="显示集合支持的方法"><a href="#显示集合支持的方法" class="headerlink" title="显示集合支持的方法"></a>显示集合支持的方法</h1><pre><code>&gt; db.users.help()</code></pre><h1 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h1><pre><code>&gt; db.createCollection(&quot;users&quot;)</code></pre><h1 id="插入操作insert"><a href="#插入操作insert" class="headerlink" title="插入操作insert"></a>插入操作insert</h1><pre><code>&gt; db.users.insert({&quot;name&quot;:&quot;kiinlam&quot;,&quot;age&quot;:28})</code></pre><h1 id="查询操作find"><a href="#查询操作find" class="headerlink" title="查询操作find"></a>查询操作find</h1><h2 id="查找所有文档"><a href="#查找所有文档" class="headerlink" title="查找所有文档"></a>查找所有文档</h2><pre><code>&gt; db.users.find()</code></pre><h2 id="查找指定文档"><a href="#查找指定文档" class="headerlink" title="查找指定文档"></a>查找指定文档</h2><pre><code>&gt; db.users.find({&quot;name&quot;:&quot;kiinlam&quot;})</code></pre><h2 id="查询一条"><a href="#查询一条" class="headerlink" title="查询一条"></a>查询一条</h2><pre><code>&gt; db.users.findOne({&quot;name&quot;:&quot;kiinlam&quot;})</code></pre><h2 id="大于-gt"><a href="#大于-gt" class="headerlink" title="大于$gt"></a>大于$gt</h2><pre><code>&gt; db.users.find({&quot;age&quot;:{$gt:22}})</code></pre><h2 id="大于等于-gte"><a href="#大于等于-gte" class="headerlink" title="大于等于$gte"></a>大于等于$gte</h2><pre><code>&gt; db.users.find({&quot;age&quot;:{$gte:22}})</code></pre><h2 id="小于-lt"><a href="#小于-lt" class="headerlink" title="小于$lt"></a>小于$lt</h2><pre><code>&gt; db.users.find({&quot;age&quot;:{$lt:22}})</code></pre><h2 id="小于等于-gte"><a href="#小于等于-gte" class="headerlink" title="小于等于$gte"></a>小于等于$gte</h2><pre><code>&gt; db.users.find({&quot;age&quot;:{$lte:22}})</code></pre><h2 id="不等于-ne"><a href="#不等于-ne" class="headerlink" title="不等于$ne"></a>不等于$ne</h2><pre><code>&gt; db.users.find(&quot;age&quot;:{$ne:22})</code></pre><h2 id="或-or"><a href="#或-or" class="headerlink" title="或$or"></a>或$or</h2><pre><code>&gt; db.users.find({$or:[{&quot;name&quot;:&quot;kiinlam&quot;},{&quot;name&quot;:&quot;cheungkiinlam&quot;}]})</code></pre><h2 id="在集合中-in"><a href="#在集合中-in" class="headerlink" title="在集合中$in"></a>在集合中$in</h2><pre><code>&gt; db.users.find(&quot;name&quot;:{$in:[&quot;kiinlam&quot;,&quot;cheungkiinlam&quot;]})</code></pre><h2 id="不在集合中-nin"><a href="#不在集合中-nin" class="headerlink" title="不在集合中$nin"></a>不在集合中$nin</h2><pre><code>&gt; db.users.find(&quot;name&quot;:{$nin:[&quot;kiinlam&quot;,&quot;cheungkiinlam&quot;]})</code></pre><h2 id="正则查询"><a href="#正则查询" class="headerlink" title="正则查询"></a>正则查询</h2><pre><code>&gt; db.users.find({&quot;name&quot;:/^k/,&quot;name&quot;:/m$/})</code></pre><h2 id="筛选查询-where"><a href="#筛选查询-where" class="headerlink" title="筛选查询$where"></a>筛选查询$where</h2><pre><code>// 使用js function作为筛选条件&gt; db.users.find({$where: function(){return this.name==&apos;kiinlam&apos;}})</code></pre><h2 id="限制查询数量limit"><a href="#限制查询数量limit" class="headerlink" title="限制查询数量limit"></a>限制查询数量limit</h2><pre><code>&gt; db.users.find({&quot;age&quot;:22}).limit(10)</code></pre><h1 id="更新操作update"><a href="#更新操作update" class="headerlink" title="更新操作update"></a>更新操作update</h1><h2 id="指定文档全部更新，等于覆盖"><a href="#指定文档全部更新，等于覆盖" class="headerlink" title="指定文档全部更新，等于覆盖"></a>指定文档全部更新，等于覆盖</h2><pre><code>&gt; db.users.update({&quot;name&quot;:&quot;kiinlam&quot;}, {&quot;name&quot;:&quot;cheungkiinlam&quot;,&quot;age&quot;:27})</code></pre><h2 id="局部更新一：增量更新-inc"><a href="#局部更新一：增量更新-inc" class="headerlink" title="局部更新一：增量更新$inc"></a>局部更新一：增量更新$inc</h2><pre><code>// age增加2，其他不变&gt; db.users.update({&quot;name&quot;:&quot;kiinlam&quot;}, {$inc:{&quot;age&quot;:2}})</code></pre><h2 id="局部更新二：字段修改-set"><a href="#局部更新二：字段修改-set" class="headerlink" title="局部更新二：字段修改$set"></a>局部更新二：字段修改$set</h2><pre><code>// age改为20&gt; db.users.update({&quot;name&quot;:&quot;kiinlam&quot;}, {$set:{&quot;age&quot;:20}})</code></pre><h2 id="新增更新：如果不存在，就新增一条"><a href="#新增更新：如果不存在，就新增一条" class="headerlink" title="新增更新：如果不存在，就新增一条"></a>新增更新：如果不存在，就新增一条</h2><pre><code>// 第三个参数为true&gt; db.users.update({&quot;name&quot;:&quot;kiinlam&quot;}, {$set:{&quot;age&quot;:18}}, true)</code></pre><h2 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h2><pre><code>// 如果匹配多条，默认只改第一条，将第四个参数设为true可全部更新&gt; db.users.update({&quot;name&quot;:&quot;kiinlam&quot;}, {$set:{&quot;age&quot;:18}}, true, true)</code></pre><h1 id="保存操作save"><a href="#保存操作save" class="headerlink" title="保存操作save"></a>保存操作save</h1><pre><code>// 插入新文档，如果不提供&quot;_id&quot;字段&gt; db.users.save({&quot;name&quot;:&quot;kiinlam&quot;, &quot;age&quot;:28})// 更新已存在的文档&gt; db.users.save({&quot;_id&quot;:&quot;xxx&quot;,&quot;name&quot;:&quot;kiinlam&quot;, &quot;age&quot;:28})</code></pre><h1 id="删除操作remove"><a href="#删除操作remove" class="headerlink" title="删除操作remove"></a>删除操作remove</h1><p>删除操作不可恢复</p><h2 id="删除所有，但不删除索引"><a href="#删除所有，但不删除索引" class="headerlink" title="删除所有，但不删除索引"></a>删除所有，但不删除索引</h2><pre><code>&gt; db.users.remove({})</code></pre><h2 id="删除指定文档"><a href="#删除指定文档" class="headerlink" title="删除指定文档"></a>删除指定文档</h2><pre><code>&gt; db.users.remove({&quot;name&quot;:&quot;kiinlam&quot;})</code></pre><h2 id="删除一条指定文档，如果有多条结果"><a href="#删除一条指定文档，如果有多条结果" class="headerlink" title="删除一条指定文档，如果有多条结果"></a>删除一条指定文档，如果有多条结果</h2><pre><code>&gt; db.users.remove({&quot;name&quot;:&quot;kiinlam&quot;}, true)</code></pre><p>完全删除集合，包括索引，应当使用<code>drop</code></p><p>大量删除时，采用复制需要保留的文档到新集合，再用<code>drop</code>删除集合。</p><h1 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h1><pre><code>&gt; db.dropDatabase()</code></pre><h1 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h1><pre><code>&gt; db.users.drop()</code></pre><h1 id="计数操作count"><a href="#计数操作count" class="headerlink" title="计数操作count"></a>计数操作count</h1><pre><code>&gt; db.users.count()&gt; db.users.count({&quot;age&quot;:29})</code></pre><h1 id="唯一值查询distinct"><a href="#唯一值查询distinct" class="headerlink" title="唯一值查询distinct"></a>唯一值查询distinct</h1><h2 id="指定字段有多个相同时，只取一个，返回指定字段的值组合成的数组"><a href="#指定字段有多个相同时，只取一个，返回指定字段的值组合成的数组" class="headerlink" title="指定字段有多个相同时，只取一个，返回指定字段的值组合成的数组"></a>指定字段有多个相同时，只取一个，返回指定字段的值组合成的数组</h2><pre><code>&gt; db.users.distinct(&quot;age&quot;)</code></pre><h1 id="分组操作group"><a href="#分组操作group" class="headerlink" title="分组操作group"></a>分组操作group</h1><p>按照<code>age</code>进行分组操作，分组结果存放在<code>user</code>中，值为对应<code>age</code>的name值的数组</p><p><code>key</code>：分组依据</p><p><code>initial</code>：初始化函数，每个不同的age组共享同一个函数</p><p><code>$reduce</code>： 第一个参数为当前文档，第二参数为前一次函数操作的累计对象，第一次为<code>initial</code>对应的对象</p><pre><code>&gt; db.users.group({                    &quot;key&quot;: {&quot;age&quot;: true},                    &quot;initial&quot;: {&quot;user&quot;: []},                    &quot;$reduce&quot;: function(cur,prev){                        prev.user.push(cur.name);                    }                })</code></pre><p>假设有数据如下：</p><pre><code>{ &quot;_id&quot; : ObjectId(&quot;55910457607379845607d9e2&quot;), &quot;name&quot; : &quot;kiinlam&quot;, &quot;age&quot; : 29 }{ &quot;_id&quot; : ObjectId(&quot;55910468607379845607d9e3&quot;), &quot;name&quot; : &quot;shadow&quot;, &quot;age&quot; : 26 }{ &quot;_id&quot; : ObjectId(&quot;55910992607379845607d9e5&quot;), &quot;name&quot; : &quot;foo&quot;, &quot;age&quot; : 29 }{ &quot;_id&quot; : ObjectId(&quot;55911fca607379845607d9e6&quot;), &quot;name&quot; : &quot;dd&quot;, &quot;age&quot; : 22 }{ &quot;_id&quot; : ObjectId(&quot;55911fd3607379845607d9e7&quot;), &quot;name&quot; : &quot;mm&quot;, &quot;age&quot; : 22 }{ &quot;_id&quot; : ObjectId(&quot;55911fdf607379845607d9e8&quot;), &quot;name&quot; : &quot;gg&quot;, &quot;age&quot; : 22 }{ &quot;_id&quot; : ObjectId(&quot;55911feb607379845607d9e9&quot;), &quot;name&quot; : &quot;jj&quot;, &quot;age&quot; : 22 }{ &quot;_id&quot; : ObjectId(&quot;55920545ff40738c1fd0a839&quot;), &quot;name&quot; : &quot;zz&quot;, &quot;age&quot; : 1 }</code></pre><p>分组结果为：</p><pre><code>[        {                &quot;age&quot; : 29,                &quot;user&quot; : [                        &quot;kiinlam&quot;,                        &quot;foo&quot;                ]        },        {                &quot;age&quot; : 26,                &quot;user&quot; : [                        &quot;shadow&quot;                ]        },        {                &quot;age&quot; : 22,                &quot;user&quot; : [                        &quot;dd&quot;,                        &quot;mm&quot;,                        &quot;gg&quot;,                        &quot;jj&quot;                ]        },        {                &quot;age&quot; : 1,                &quot;user&quot; : [                        &quot;zz&quot;                ]        }]</code></pre><h2 id="更多分组功能"><a href="#更多分组功能" class="headerlink" title="更多分组功能"></a>更多分组功能</h2><p>可选参数: <code>condition</code> 和 <code>finalize</code>。</p><pre><code>`condition` —— 过滤条件`finalize` —— 函数，分组完成后执行</code></pre><p>过滤掉<code>age</code>大于22的文档，增加属性标明分组中文档的数量</p><pre><code>&gt; db.users.group({                    &quot;key&quot;: {&quot;age&quot;: true},                    &quot;initial&quot;: {&quot;user&quot;: []},                    &quot;$reduce&quot;: function(cur,prev){                        prev.user.push(cur.name);                    },                    &quot;condition&quot;: {&quot;age&quot;:{$lte:22}},                    &quot;finalize&quot;: function(out){                        out.count = out.user.length;                    }                })</code></pre><p>分组结果为：</p><pre><code>[        {                &quot;age&quot; : 22,                &quot;user&quot; : [                        &quot;dd&quot;,                        &quot;mm&quot;,                        &quot;gg&quot;,                        &quot;jj&quot;                ],                &quot;count&quot; : 4        },        {                &quot;age&quot; : 1,                &quot;user&quot; : [                        &quot;zz&quot;                ],                &quot;count&quot; : 1        }]</code></pre><h1 id="mapReduce"><a href="#mapReduce" class="headerlink" title="mapReduce"></a>mapReduce</h1><p><code>map</code>：映射函数，内部调用<code>emit(key,value)</code>，集合按照<code>key</code>进行映射分组。</p><p><code>reduce</code>：简化函数，对<code>map</code>分组后的数据进行分组简化，<code>reduce(key,value)</code>中的<code>key</code>是<code>emit</code>中的<code>key</code>，而<code>value</code>则是<code>emit</code>分组结果的集合。</p><p><code>mapReduce</code>：最后执行的函数，参数为<code>map</code>、<code>reduce</code>和一些可选参数。</p><pre><code>&gt; db.users.mapReducefunction ( map , reduce , optionsOrOutString ){    var c = { mapreduce : this._shortName , map : map , reduce : reduce };    assert( optionsOrOutString , &quot;need to supply an optionsOrOutString&quot; )    if ( typeof( optionsOrOutString ) == &quot;string&quot; )        c[&quot;out&quot;] = optionsOrOutString;    else        Object.extend( c , optionsOrOutString );    var raw = this._db.runCommand( c );    if ( ! raw.ok ){        __mrerror__ = raw;        throw Error( &quot;map reduce failed:&quot; + tojson(raw) );    }    return new MapReduceResult( this._db , raw );}</code></pre><p>创建<code>map</code>函数</p><pre><code>function (){    emit(this.name,{count:1});}</code></pre><p>创建<code>reduce</code>函数</p><pre><code>function (key,value){    var result = {count:0};    for(var i = 0; i &lt; value.length; i++){        result.count += value[i].count;    }    return result;}</code></pre><p>执行<code>mapReduce</code>操作</p><pre><code>&gt; db.users.mapReduce(map,reduce,{&quot;out&quot;:&quot;collection&quot;})</code></pre><p>假设有数据如下</p><pre><code>{ &quot;_id&quot; : ObjectId(&quot;55910457607379845607d9e2&quot;), &quot;name&quot; : &quot;kiinlam&quot;, &quot;age&quot; : 29 }{ &quot;_id&quot; : ObjectId(&quot;55910468607379845607d9e3&quot;), &quot;name&quot; : &quot;shadow&quot;, &quot;age&quot; : 26 }{ &quot;_id&quot; : ObjectId(&quot;55910992607379845607d9e5&quot;), &quot;name&quot; : &quot;foo&quot;, &quot;age&quot; : 29 }{ &quot;_id&quot; : ObjectId(&quot;55920545ff40738c1fd0a839&quot;), &quot;name&quot; : &quot;zz&quot;, &quot;age&quot; : 1 }{ &quot;_id&quot; : ObjectId(&quot;55911fca607379845607d9e6&quot;), &quot;name&quot; : &quot;foo&quot;, &quot;age&quot; : 22 }{ &quot;_id&quot; : ObjectId(&quot;55911fd3607379845607d9e7&quot;), &quot;name&quot; : &quot;foo&quot;, &quot;age&quot; : 22 }{ &quot;_id&quot; : ObjectId(&quot;55911fdf607379845607d9e8&quot;), &quot;name&quot; : &quot;foo&quot;, &quot;age&quot; : 22 }{ &quot;_id&quot; : ObjectId(&quot;55911feb607379845607d9e9&quot;), &quot;name&quot; : &quot;foo&quot;, &quot;age&quot; : 22 }</code></pre><p>输出结果</p><pre><code>{        &quot;result&quot; : &quot;collection&quot;,    // 存放最终结果的集合名        &quot;timeMillis&quot; : 28,        &quot;counts&quot; : {                &quot;input&quot; : 8,    // 传入文档的次数                &quot;emit&quot; : 8,    // emit函数被调用次数                &quot;reduce&quot; : 1,    // reduce函数被调用次数                &quot;output&quot; : 4    // 最后返回文档的个数        },        &quot;ok&quot; : 1}</code></pre><p>查看集合<code>collection</code>中的结果</p><pre><code>&gt; db.collection.find()</code></pre><p>输出结果</p><pre><code>{ &quot;_id&quot; : &quot;foo&quot;, &quot;value&quot; : { &quot;count&quot; : 5 } }{ &quot;_id&quot; : &quot;kiinlam&quot;, &quot;value&quot; : { &quot;count&quot; : 1 } }{ &quot;_id&quot; : &quot;shadow&quot;, &quot;value&quot; : { &quot;count&quot; : 1 } }{ &quot;_id&quot; : &quot;zz&quot;, &quot;value&quot; : { &quot;count&quot; : 1 } }</code></pre><h1 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h1><p>游标只表示一个引用，并不是真正的执行，在需要的时候，通过for循环或<code>next()</code>方法进行遍历读取，枚举结束后，游标销毁，不再返回数据。</p><p>申明一个游标</p><pre><code>&gt; var list = db.collection.find()</code></pre><p>通过<code>forEach</code>遍历游标</p><pre><code>&gt; list.forEach(function(i){      print(i._id);  })</code></pre><p>输出结果</p><pre><code>fookiinlamshadowzz</code></pre><p>或者通过<code>next</code>遍历集合</p><pre><code>&gt; var list = db.collection.find()&gt; list.next(){ &quot;_id&quot; : &quot;foo&quot;, &quot;value&quot; : { &quot;count&quot; : 5 } }&gt; list.next(){ &quot;_id&quot; : &quot;kiinlam&quot;, &quot;value&quot; : { &quot;count&quot; : 1 } }&gt; list.next(){ &quot;_id&quot; : &quot;shadow&quot;, &quot;value&quot; : { &quot;count&quot; : 1 } }&gt; list.next(){ &quot;_id&quot; : &quot;zz&quot;, &quot;value&quot; : { &quot;count&quot; : 1 } }&gt; list.next()2015-07-01T11:27:38.186+0800 E QUERY    Error: error hasNext: false    at Error (&lt;anonymous&gt;)    at DBQuery.next (src/mongo/shell/query.js:255:15)    at (shell):1:6 at src/mongo/shell/query.js:255&gt; list&gt;</code></pre><h1 id="索引ensureIndex"><a href="#索引ensureIndex" class="headerlink" title="索引ensureIndex"></a>索引ensureIndex</h1><h2 id="建立索引"><a href="#建立索引" class="headerlink" title="建立索引"></a>建立索引</h2><pre><code>// 1为升序，-1为降序&gt; db.users.ensureIndex({&quot;name&quot;:1})</code></pre><h2 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h2><pre><code>&gt; db.users.ensureIndex({&quot;name&quot;:1},{&quot;unique&quot;:true})</code></pre><h2 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h2><pre><code>&gt; db.users.ensureIndex({&quot;name&quot;:1, &quot;age&quot;:-1})</code></pre><h2 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h2><pre><code>&gt; db.users.getIndexes()</code></pre><h2 id="按指定索引查询"><a href="#按指定索引查询" class="headerlink" title="按指定索引查询"></a>按指定索引查询</h2><pre><code>&gt; db.users.find({&quot;name&quot;:&quot;kiinlam&quot;}).hint({&quot;name&quot;:1,&quot;age&quot;:1})</code></pre><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><pre><code>// 删除所有自定义索引&gt; db.users.dropIndexes()// 删除指定索引&gt; db.users.dropIndex(&quot;name_1&quot;)</code></pre><h1 id="性能分析函数explain"><a href="#性能分析函数explain" class="headerlink" title="性能分析函数explain"></a>性能分析函数explain</h1><pre><code>&gt; db.users.find().explain(&quot;executionStats&quot;)</code></pre><h1 id="主从数据库部署"><a href="#主从数据库部署" class="headerlink" title="主从数据库部署"></a>主从数据库部署</h1><h2 id="创建主数据库master"><a href="#创建主数据库master" class="headerlink" title="创建主数据库master"></a>创建主数据库master</h2><pre><code>&gt; mongod --dbpath=XXX --master</code></pre><h2 id="创建从数据库slave"><a href="#创建从数据库slave" class="headerlink" title="创建从数据库slave"></a>创建从数据库slave</h2><pre><code>// 指定从数据库端口--port// 指定主数据库源--source&gt; mongod --dbpath=XXX --port=8888 --slave --source=127.0.0.1:27017</code></pre><h2 id="后期指定主数据库源"><a href="#后期指定主数据库源" class="headerlink" title="后期指定主数据库源"></a>后期指定主数据库源</h2><pre><code>&gt; mongod --dbpath=XXX --port=8888 --slave// 后期添加源// 切换到local数据库&gt; use local// 在sources中加入源地址&gt; db.sources.insert({&quot;host&quot;:&quot;127.0.0.1:27017&quot;})</code></pre><h1 id="副本集replSet"><a href="#副本集replSet" class="headerlink" title="副本集replSet"></a>副本集replSet</h1><p>该架构没有特定的主数据库，一个数据库宕机了，另一个数据库会顶上</p><h2 id="创建第一个数据库服务器"><a href="#创建第一个数据库服务器" class="headerlink" title="创建第一个数据库服务器"></a>创建第一个数据库服务器</h2><pre><code>// 需要指定集群名及下一个数据库地址&gt; mongod --dbpath=XXX --port 2222 --replSet mySet/127.0.0.1:3333</code></pre><h2 id="创建第二个数据库服务器"><a href="#创建第二个数据库服务器" class="headerlink" title="创建第二个数据库服务器"></a>创建第二个数据库服务器</h2><pre><code>&gt; mongod --dbpath=XXX --port 3333 --replSet mySet/127.0.0.1:2222</code></pre><h2 id="初始化副本集"><a href="#初始化副本集" class="headerlink" title="初始化副本集"></a>初始化副本集</h2><pre><code>// 进入任一数据库的admin集合&gt; mongo 127.0.0.1:2222/admin// 执行初始化操作&gt; db.runCommand({                    &quot;replSetInitiate&quot;:{                        &quot;_id&quot;:&quot;mySet&quot;,                        &quot;members&quot;:[                            {                                &quot;_id&quot;:1,                                &quot;host&quot;:&quot;127.0.0.1:2222&quot;                            },                            {                                &quot;_id&quot;:2,                                &quot;host&quot;:&quot;127.0.0.1:3333&quot;                            }                        ]                    }                })</code></pre><h2 id="仲裁服务器"><a href="#仲裁服务器" class="headerlink" title="仲裁服务器"></a>仲裁服务器</h2><pre><code>// 启动仲裁服务器&gt; mongod --dbpath=XXX --port 4444 --replSet mySet/127.0.0.1:2222// 回到admin集合中添加仲裁服务器&gt; mongo 127.0.0.1:2222/admin&gt; rs.addArb(&quot;127.0.0.1:4444&quot;)// 查看服务器集群状态&gt; rs.status()</code></pre><h1 id="分片技术"><a href="#分片技术" class="headerlink" title="分片技术"></a>分片技术</h1><p>将集合进行拆分，将拆分的数据均摊到几个分片上。</p><p>主要参与者：</p><ul><li>客户端</li><li>路由服务器mongos</li><li>配置服务器</li><li>分片数据库实例</li></ul><h2 id="开启配置服务器config"><a href="#开启配置服务器config" class="headerlink" title="开启配置服务器config"></a>开启配置服务器config</h2><pre><code>&gt; mongod --dbpath=XXX --port 2222</code></pre><h2 id="开启路由服务器mongos"><a href="#开启路由服务器mongos" class="headerlink" title="开启路由服务器mongos"></a>开启路由服务器mongos</h2><pre><code>// 指定配置服务器&gt; mongos --port 3333 --configdb=127.0.0.1:2222</code></pre><h2 id="开启分片数据库服务器mongod"><a href="#开启分片数据库服务器mongod" class="headerlink" title="开启分片数据库服务器mongod"></a>开启分片数据库服务器mongod</h2><pre><code>&gt; mongod --dbpath=XXX --port 4444&gt; mongod --dbpath=XXX --port 5555</code></pre><h2 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h2><pre><code>// 进入mongos数据库admin集合&gt; mongo 127.0.0.1:3333/admin// 添加分片服务器addshard&gt; db.runCommand({                    &quot;addshard&quot;:&quot;127.0.0.1:4444&quot;,                    &quot;allowLocal&quot;:true                })&gt; db.runCommand({                    &quot;addshard&quot;:&quot;127.0.0.1:5555&quot;,                    &quot;allowLocal&quot;:true                })// 开启数据库test的分片功能enablesharding&gt; db.runCommand({&quot;enablesharding&quot;:&quot;test&quot;})// 指定集合中分片的片键users.name&gt; db.runCommand({&quot;shardcollection&quot;:&quot;test.users&quot;,&quot;key&quot;:{&quot;name&quot;:1}})// 在mongos中查看数据分片情况&gt; use test&gt; db.printShardingStatus()</code></pre><h1 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h1><p>运维通常会涉及到以下4个方面</p><ul><li>安装部署</li><li>状态监控</li><li>安全认证</li><li>备份和恢复</li></ul><h2 id="安装部署为windows服务"><a href="#安装部署为windows服务" class="headerlink" title="安装部署为windows服务"></a>安装部署为windows服务</h2><pre><code>// 指定日志路径，添加install参数&gt; mongod --dbpath=XXX --logpath=XXX --port=2222 --install// 启动服务&gt; net start MongoDB</code></pre><h2 id="状态监控"><a href="#状态监控" class="headerlink" title="状态监控"></a>状态监控</h2><h3 id="静态统计"><a href="#静态统计" class="headerlink" title="静态统计"></a>静态统计</h3><p><em>db.stats()</em></p><pre><code>// 查看单个数据库状态&gt; db.stats()</code></pre><p><code>stats</code>比较简单，可以参考<a href="http://www.cnblogs.com/xuegang/archive/2011/10/13/2209965.html" target="_blank" rel="noopener">db.stats()</a>一文</p><p><em>db.serverStatus()</em></p><pre><code>// 查看整个mongodb的状态// 进入admin集合&gt; mongo 127.0.0.1:2222/admin// 查看状态&gt; db.serverStatus()</code></pre><p><code>serverStatus</code>的参数很多，可以参考<a href="http://www.cnblogs.com/xuegang/archive/2011/10/13/2210339.html" target="_blank" rel="noopener">db.serverStatus()</a>一文</p><h3 id="实时统计"><a href="#实时统计" class="headerlink" title="实时统计"></a>实时统计</h3><pre><code>&gt; mongostat --port 2222</code></pre><h2 id="安全认证"><a href="#安全认证" class="headerlink" title="安全认证"></a>安全认证</h2><p><em>TODO</em></p><p>有点复杂，偷懒了，参考<a href="http://docs.mongodb.org/manual/security/" target="_blank" rel="noopener">安全认证</a></p><h2 id="备份和恢复"><a href="#备份和恢复" class="headerlink" title="备份和恢复"></a>备份和恢复</h2><pre><code>// 备份test数据库到D:\mongodb\backup&gt; mongodump --port 2222 -d test -o D:\mongodb\backup// 恢复数据，drop表示恢复前删除原有数据&gt; mongorestore --port 2222 -d test --drop D:\mongodb\backup</code></pre><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.mongodb.org/" target="_blank" rel="noopener">mongoDB</a></li><li><a href="http://docs.mongodb.org/manual/" target="_blank" rel="noopener">MongoDB文档</a></li><li><a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-windows/" target="_blank" rel="noopener">install-mongodb-on-windows</a></li><li><a href="http://www.cnblogs.com/huangxincheng/category/355399.html" target="_blank" rel="noopener">8天学通MongoDB系列</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.mongodb.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mongoDB官网&lt;/a&gt;下载安装（&lt;a href=&quot;http://docs.mongodb.org/manual/tutorial/install-mongodb-on-windows/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Windows安装方法&lt;/a&gt;）&lt;/p&gt;
&lt;h1 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h1&gt;&lt;p&gt;集合——对应关系数据库中的表&lt;/p&gt;
&lt;p&gt;文档——对应关系数据库中的行&lt;/p&gt;
&lt;h1 id=&quot;启动数据库服务&quot;&gt;&lt;a href=&quot;#启动数据库服务&quot; class=&quot;headerlink&quot; title=&quot;启动数据库服务&quot;&gt;&lt;/a&gt;启动数据库服务&lt;/h1&gt;&lt;p&gt;定位到安装目录下的bin文件夹里后&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; mongod --dbpath ../data/db
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如没有&lt;code&gt;data/db&lt;/code&gt;文件夹，需先创建，&lt;code&gt;dbpath&lt;/code&gt;用于指定数据存放位置&lt;/p&gt;
    
    </summary>
    
      <category term="mongoDB" scheme="https://raincal.gitee.io/blog/categories/mongoDB/"/>
    
    
      <category term="mongoDB" scheme="https://raincal.gitee.io/blog/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS终端使用subl运行Sublime Text 3</title>
    <link href="https://raincal.gitee.io/blog/post/launch-sublime-text-from-command-line/"/>
    <id>https://raincal.gitee.io/blog/post/launch-sublime-text-from-command-line/</id>
    <published>2015-05-08T21:49:56.000Z</published>
    <updated>2018-10-21T07:00:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.添加link<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/<span class="built_in">local</span>/bin/subl</span><br></pre></td></tr></table></figure></p><p>2.编辑PATH<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure></p><p>3.添加PATH<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esc -&gt; <span class="built_in">shift</span> + : -&gt; wq保存退出</span><br></pre></td></tr></table></figure><p>4.应用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.添加link&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;
      
    
    </summary>
    
    
      <category term="macOS" scheme="https://raincal.gitee.io/blog/tags/macOS/"/>
    
      <category term="Sublime" scheme="https://raincal.gitee.io/blog/tags/Sublime/"/>
    
      <category term="Editor" scheme="https://raincal.gitee.io/blog/tags/Editor/"/>
    
  </entry>
  
</feed>
